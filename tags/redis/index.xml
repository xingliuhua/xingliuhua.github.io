<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>redis - 标签 - xingliuhua博客</title>
        <link>https://xingliuhua.github.io/tags/redis/</link>
        <description>redis - 标签 - xingliuhua博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>947725562@qq.com (xingliuhua)</managingEditor>
            <webMaster>947725562@qq.com (xingliuhua)</webMaster><lastBuildDate>Tue, 16 Jun 2020 17:55:28 &#43;0800</lastBuildDate><atom:link href="https://xingliuhua.github.io/tags/redis/" rel="self" type="application/rss+xml" /><item>
    <title>Redis学习-lru和redis实现</title>
    <link>https://xingliuhua.github.io/posts/redis_lru%E5%92%8Credis%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Tue, 16 Jun 2020 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_lru%E5%92%8Credis%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[lru实现 数组实现 用一个数组来存储数据，给每一个数据项标记一个访问时间戳，每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，并将新]]></description>
</item><item>
    <title>Redis学习-与数据库一致性问题</title>
    <link>https://xingliuhua.github.io/posts/redis_%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7/</link>
    <pubDate>Tue, 16 Jun 2020 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
    <description><![CDATA[背景 我们使用redis作为缓存，查询的时候先去redis查，如果有数据直接返回，降低数据库的压力。如果没有的话，查数据库，如果数据库中查到了]]></description>
</item><item>
    <title>Redis学习-redis底层数据结构</title>
    <link>https://xingliuhua.github.io/posts/redis_%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <pubDate>Sun, 16 Apr 2017 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
    <description><![CDATA[动态字符串 redis是C语言编写，但是字符串并不是简单地的C字符串。它是SDS（simple dynamic string）。 /* * 保存字符串对象的结构 */ struct sdshdr]]></description>
</item><item>
    <title>Redis学习-主从、哨兵、集群</title>
    <link>https://xingliuhua.github.io/posts/redis_%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4/</link>
    <pubDate>Sun, 16 Apr 2017 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4/</guid>
    <description><![CDATA[主从 需要注意，主从复制的开启，完全是在从节点发起的；不需要我们在主节点做任何事情。 从节点开启主从复制，有3种方式： （1）配置文件 在从服务器的]]></description>
</item><item>
    <title>Redis学习（一）-redis基础</title>
    <link>https://xingliuhua.github.io/posts/redis_%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Sun, 16 Apr 2017 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[redis简介 Redis 是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志 型、Key-Value 数据库。 redis会周期性的把更新的]]></description>
</item><item>
    <title>Redis学习（三）-redis过期机制</title>
    <link>https://xingliuhua.github.io/posts/redis_%E8%BF%87%E6%9C%9F%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Sun, 16 Apr 2017 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_%E8%BF%87%E6%9C%9F%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[此篇主要介绍redis的一些机制 expire删除机制 大家有没有想过redis是怎么实现key的过期删除的，作为有经验的开发人员，也许大家很容]]></description>
</item><item>
    <title>Redis学习（二）-redis进阶</title>
    <link>https://xingliuhua.github.io/posts/redis_%E8%BF%9B%E9%98%B6/</link>
    <pubDate>Sun, 16 Apr 2017 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_%E8%BF%9B%E9%98%B6/</guid>
    <description><![CDATA[上篇主要讲到redis的基础命令，这篇涉及到redis的配置、持久化、主从、事务、内存淘汰策略 redis的配置 启动redis服务器的时候会指]]></description>
</item><item>
    <title>Redis学习（五）-缓存三大问题</title>
    <link>https://xingliuhua.github.io/posts/redis_%E7%BC%93%E5%AD%98%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/</link>
    <pubDate>Sun, 16 Apr 2017 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_%E7%BC%93%E5%AD%98%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[缓存穿透 概念 访问一个不存在的key，缓存不起作用，请求会穿透到DB，流量大时DB会挂掉。 解决方案 第一种：采用布隆过滤器，使用一个足够大的bi]]></description>
</item><item>
    <title>Redis 内存过高</title>
    <link>https://xingliuhua.github.io/posts/redis_%E5%86%85%E5%AD%98%E8%BF%87%E9%AB%98/</link>
    <pubDate>Sat, 15 Apr 2017 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_%E5%86%85%E5%AD%98%E8%BF%87%E9%AB%98/</guid>
    <description><![CDATA[查找bigkey redis-cli --bigkeys 统计每种数据类型的键值对个数以及平均大小。此外，这个命令执行后，会输出每种数据类型中最大的 bigkey 的信息，对于 String 类型来说，会输]]></description>
</item><item>
    <title>Redis学习（四）-golang使用redis</title>
    <link>https://xingliuhua.github.io/posts/redis_go/</link>
    <pubDate>Sat, 15 Apr 2017 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/redis_go/</guid>
    <description><![CDATA[该文章讲解redigo的使用。 talk is cheap show me the code redigo基本使用 opt := redis.DialPassword(&#34;root&#34;) c, err := redis.Dial(&#34;tcp&#34;, &#34;127.0.0.1:6379&#34;, opt) if err != nil { fmt.Println(&#34;Connect to redis error&#34;, err) return } defer c.Close() userName, err := redis.String(c.Do(&#34;GET&#34;, &#34;userName&#34;)) if err != nil { fmt.Println(&#34;redis get failed:&#34;, err) }]]></description>
</item></channel>
</rss>
