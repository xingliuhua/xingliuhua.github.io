<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - 标签 - xlh博客</title>
        <link>https://xingliuhua.github.io/tags/golang/</link>
        <description>golang - 标签 - xlh博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>947725562@qq.com (xingliuhua)</managingEditor>
            <webMaster>947725562@qq.com (xingliuhua)</webMaster><lastBuildDate>Thu, 30 Sep 2021 17:55:28 &#43;0800</lastBuildDate><atom:link href="https://xingliuhua.github.io/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>golang 结构体内存对齐</title>
    <link>https://xingliuhua.github.io/posts/go_%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
    <pubDate>Thu, 30 Sep 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
    <description><![CDATA[为何需要内存对齐 CPU和内存数据交互的过程。CPU和内存是通过总线进行数据交互的。其中地址总线用来传递CPU需要的数据地址，内存将数据通过数]]></description>
</item><item>
    <title>channel</title>
    <link>https://xingliuhua.github.io/posts/go_channel/</link>
    <pubDate>Thu, 19 Aug 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_channel/</guid>
    <description><![CDATA[关闭不再需要使用的 channel 并不是必须的。跟其他资源比如打开的文件、socket 连接不一样，这类资源使用完后不关闭后会造成句柄泄露，channel 使]]></description>
</item><item>
    <title>golang 引用私有仓库</title>
    <link>https://xingliuhua.github.io/posts/go_%E5%BC%95%E7%94%A8%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</link>
    <pubDate>Thu, 19 Aug 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E5%BC%95%E7%94%A8%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</guid>
    <description><![CDATA[` 直接使用go get 直接使用go get &hellip;添加私有仓库依赖时，会出现以下错误： get &#34;gitlab.com/xxx&#34;: found meta tag get.metaImport{Prefix:&#34;gitlab.com/xxx&#34;, VCS:&#34;git&#34;, RepoRoot:&#34;https://gitlab.com/xxx.git&#34;} at //gitlab.com/xxx?go-get=1 go get gitlab.com/xxx: git ls-remote -q https://gitlab.com/xxx.git in /Users/sulin/go/pkg/mod/cache/vcs/91fae55e78195f3139c4f56af15f9b47ba7aa6ca0fa761efbd5b6e2b16d5159d: exit status 128: fatal: could not read Username for &#39;https://gitlab.com&#39;:]]></description>
</item><item>
    <title>go sync.map</title>
    <link>https://xingliuhua.github.io/posts/go_syncmap/</link>
    <pubDate>Sat, 19 Jun 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_syncmap/</guid>
    <description><![CDATA[实现安全的map 自go 1.6之后， 并发地读写map会报错，这在一些知名的开源库中都存在这个问题，所以go 1.9之前的解决方案是额外绑定一个锁]]></description>
</item><item>
    <title>go 类型直接比较</title>
    <link>https://xingliuhua.github.io/posts/go_%E7%B1%BB%E5%9E%8B%E7%9B%B4%E6%8E%A5%E6%AF%94%E8%BE%83/</link>
    <pubDate>Tue, 08 Dec 2020 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E7%B1%BB%E5%9E%8B%E7%9B%B4%E6%8E%A5%E6%AF%94%E8%BE%83/</guid>
    <description><![CDATA[结构体能否比较？数组能否比较？slice、map、channel能否比较？接口能否比较？函数能否比较？ 结构体比较 能用&quot;==&quo]]></description>
</item><item>
    <title>go test</title>
    <link>https://xingliuhua.github.io/posts/go_test/</link>
    <pubDate>Sat, 20 Jun 2020 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_test/</guid>
    <description><![CDATA[概述 我们可以为 Go 程序编写三类测试，即：功能测试（test）、基准测试（benchmark，也称性能测试），以及示例测试（example） 测试]]></description>
</item><item>
    <title>pb,rpc,grpc</title>
    <link>https://xingliuhua.github.io/posts/go_grpc/</link>
    <pubDate>Tue, 05 Nov 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_grpc/</guid>
    <description><![CDATA[protobuf 需要下载protoc来进行编译.proto文件https://github.com/protocolbuffers/protobuf/re]]></description>
</item><item>
    <title>rabbitmq</title>
    <link>https://xingliuhua.github.io/posts/go_rabbitmq/</link>
    <pubDate>Fri, 27 Sep 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_rabbitmq/</guid>
    <description><![CDATA[安装和端口 这里只给出一种基于docker安装的简单形式。 docker run -d &ndash;hostname my-rabbit &ndash;name rmq -p 15672:15672 -p 5672:5672 -p 25672:25672 -e RABBITMQ_DEFAULT_USER=用户名 -e RA]]></description>
</item><item>
    <title>go select</title>
    <link>https://xingliuhua.github.io/posts/go_select/</link>
    <pubDate>Tue, 13 Aug 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_select/</guid>
    <description><![CDATA[select使用 select只会执行一次 case语句必须是对channel的操作 case语句不管是接收还是发送，语句表达式都会执行（执行顺序]]></description>
</item><item>
    <title>唯一id</title>
    <link>https://xingliuhua.github.io/posts/go_unique_id/</link>
    <pubDate>Thu, 25 Jul 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_unique_id/</guid>
    <description><![CDATA[UUID UUID是由一组32位数的16进制数字所构成，所以UUID理论上的总数为16^32=2^128。 以连字号分为五段，形式为8-4-4-4-1]]></description>
</item></channel>
</rss>
