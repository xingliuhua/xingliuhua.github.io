<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - 标签 - xlh博客</title>
        <link>https://xingliuhua.github.io/tags/golang/</link>
        <description>golang - 标签 - xlh博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>947725562@qq.com (xlh)</managingEditor>
            <webMaster>947725562@qq.com (xlh)</webMaster><lastBuildDate>Sat, 20 Jun 2020 17:55:28 &#43;0800</lastBuildDate><atom:link href="https://xingliuhua.github.io/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>go test</title>
    <link>https://xingliuhua.github.io/posts/go_test/</link>
    <pubDate>Sat, 20 Jun 2020 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_test/</guid>
    <description><![CDATA[概述 我们可以为 Go 程序编写三类测试，即：功能测试（test）、基准测试（benchmark，也称性能测试），以及示例测试（example） 测试]]></description>
</item><item>
    <title>pb,rpc,grpc</title>
    <link>https://xingliuhua.github.io/posts/go_grpc/</link>
    <pubDate>Tue, 05 Nov 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_grpc/</guid>
    <description><![CDATA[protobuf 需要下载protoc来进行编译.proto文件https://github.com/protocolbuffers/protobuf/re]]></description>
</item><item>
    <title>rabbitmq</title>
    <link>https://xingliuhua.github.io/posts/go_rabbitmq/</link>
    <pubDate>Fri, 27 Sep 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_rabbitmq/</guid>
    <description><![CDATA[安装和端口 这里只给出一种基于docker安装的简单形式。 docker run -d &ndash;hostname my-rabbit &ndash;name rmq -p 15672:15672 -p 5672:5672 -p 25672:25672 -e RABBITMQ_DEFAULT_USER=用户名 -e RA]]></description>
</item><item>
    <title>go select</title>
    <link>https://xingliuhua.github.io/posts/go_select/</link>
    <pubDate>Tue, 13 Aug 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_select/</guid>
    <description><![CDATA[select使用 select只会执行一次 case语句必须是对channel的操作 case语句不管是接收还是发送，语句表达式都会执行（执行顺序]]></description>
</item><item>
    <title>唯一id</title>
    <link>https://xingliuhua.github.io/posts/go_unique_id/</link>
    <pubDate>Thu, 25 Jul 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_unique_id/</guid>
    <description><![CDATA[UUID UUID是由一组32位数的16进制数字所构成，所以UUID理论上的总数为16^32=2^128。 以连字号分为五段，形式为8-4-4-4-1]]></description>
</item><item>
    <title>range语句</title>
    <link>https://xingliuhua.github.io/posts/go_range/</link>
    <pubDate>Thu, 04 Jul 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_range/</guid>
    <description><![CDATA[range slice func main() { s := []int{1, 2, 3} for i := 0; i &lt; len(s); i++ { if i == 1 { s = append(s, 4) } fmt.Println(i, s[i]) } } 上面的代码，遍历中新增元素是没有问题的。 但是下面的range遍历，结果是不]]></description>
</item><item>
    <title>go内存分配1</title>
    <link>https://xingliuhua.github.io/posts/go_memory1/</link>
    <pubDate>Mon, 24 Jun 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_memory1/</guid>
    <description><![CDATA[概述 为了方便自主管理内存，做法便是先向系统申请一块内存，然后将内存切割成小块，通过一定的内存分配算法管理内存。 预申请的内存划分为spans、]]></description>
</item><item>
    <title>go内存分配2</title>
    <link>https://xingliuhua.github.io/posts/go_memory2/</link>
    <pubDate>Mon, 24 Jun 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_memory2/</guid>
    <description><![CDATA[内存基础 内存： cpu与硬盘速度不匹配，引入内存作为中间缓冲。 cache: cpu与内存速度也不匹配，引入chache作为中间缓冲，并逐渐发展为3级cac]]></description>
</item><item>
    <title>go绝知-map</title>
    <link>https://xingliuhua.github.io/posts/go_map/</link>
    <pubDate>Wed, 19 Jun 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_map/</guid>
    <description><![CDATA[hash冲突 哈希查找表一般会存在“碰撞”的问题，就是说不同的 key 被哈希到了同一个 bucket。一般有两种应对方法：链表法和开放地址法。链表法将]]></description>
</item><item>
    <title>go绝知—unsafe包</title>
    <link>https://xingliuhua.github.io/posts/go_unsafe_package/</link>
    <pubDate>Sun, 09 Jun 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_unsafe_package/</guid>
    <description><![CDATA[go中指针 先看下go中的指针，go中的指针与c语言中的指针有很大不同： go指针不支持运算 不同类型无法转换 不同类型指针不可比较 我们不难看出，g]]></description>
</item></channel>
</rss>
