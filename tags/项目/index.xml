<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>项目 - 标签 - xingliuhua博客</title>
        <link>https://xingliuhua.github.io/tags/%E9%A1%B9%E7%9B%AE/</link>
        <description>项目 - 标签 - xingliuhua博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>947725562@qq.com (xingliuhua)</managingEditor>
            <webMaster>947725562@qq.com (xingliuhua)</webMaster><lastBuildDate>Mon, 06 Jun 2022 17:55:28 &#43;0800</lastBuildDate><atom:link href="https://xingliuhua.github.io/tags/%E9%A1%B9%E7%9B%AE/" rel="self" type="application/rss+xml" /><item>
    <title>项目中gin封装</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_gin%E5%B0%81%E8%A3%85/</link>
    <pubDate>Mon, 06 Jun 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_gin%E5%B0%81%E8%A3%85/</guid>
    <description><![CDATA[背景 项目中使用gin框架，一般的注册路由和函数都这样写 func main() { engine := gin.New() engine.GET(&#34;/test&#34;,testHandler) engine.Run(&#34;localhost:8080&#34;) } type TestReq struct { Name string } func testHandler(ctx *gin.Context) { // 解析参数 name:=ctx.Query(&#34;name&#34;) testReq:=TestReq{Name: name} // 检查参数 checkTestReq(testReq) ... // 获取sessi]]></description>
</item><item>
    <title>项目中链路追踪</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</link>
    <pubDate>Mon, 06 Jun 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</guid>
    <description><![CDATA[背景 为了测试环境调试方便和线上环境快速定位问题，客户端请求接口我们要给他们返回一个traceID来标识本次请求。这样拿着traceId来找我]]></description>
</item><item>
    <title>项目中高并发抢红包</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E7%BA%A2%E5%8C%85%E9%97%AE%E9%A2%98/</link>
    <pubDate>Mon, 06 Jun 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E7%BA%A2%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[高并发抢红包问题 红包随机值 为了避免抢红包时实时计算效率慢，采用创建红包活动时就提前计算入红包库。 分配红包尽可能平均，假如现剩60块钱，还要分]]></description>
</item><item>
    <title>项目中高并发秒杀处理</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80/</link>
    <pubDate>Mon, 06 Jun 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80/</guid>
    <description><![CDATA[高并发秒杀问题 流程： 先来看秒杀活动流程： 活动入口 客户端秒杀列表页 商品秒杀详情页 点击购买 携带活动ID，商品ID提交服务端 服务端判断活动是否结束]]></description>
</item><item>
    <title>项目中错误处理</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
    <pubDate>Mon, 23 May 2022 10:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
    <description><![CDATA[项目中底层函数错误上报不能带上文件名和行号，后面查找很难，有些函数甚至同样的错误信息，比如 func AAA() error { if ...{ return errors.New(&#34;file write err&#34;) } ... if ...{ return errors.New(&#34;file write err&#34;) } } pkg/errors 使用实例]]></description>
</item><item>
    <title>gitlab cicd</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_cicd/</link>
    <pubDate>Thu, 25 Jul 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_cicd/</guid>
    <description><![CDATA[cicd工作原理 gitlab-runner 使用流程 安装gitlab服务器 安装gitlab-runner 注册gitlab-runner，在这个步骤中，我们要知道执行器]]></description>
</item><item>
    <title>唯一id</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_unique_id/</link>
    <pubDate>Thu, 25 Jul 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_unique_id/</guid>
    <description><![CDATA[UUID UUID是由一组32位数的16进制数字所构成，所以UUID理论上的总数为16^32=2^128。 以连字号分为五段，形式为8-4-4-4-1]]></description>
</item><item>
    <title>elasticsearch</title>
    <link>https://xingliuhua.github.io/posts/elasticsearch/</link>
    <pubDate>Wed, 27 Mar 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/elasticsearch/</guid>
    <description><![CDATA[安装启动 elasticsearch需要依赖jdk elastic默认是9200端口 ctrl+c elastic就会停止 默认情况下，Elastic 只允许本机]]></description>
</item><item>
    <title>elasticsearch和mysql同步</title>
    <link>https://xingliuhua.github.io/posts/es_mysql%E5%90%8C%E6%AD%A5/</link>
    <pubDate>Wed, 27 Mar 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/es_mysql%E5%90%8C%E6%AD%A5/</guid>
    <description><![CDATA[es mysql同步 go-mysql-elasticsearch是用于同步mysql数据到ES集群的一个开源工具。 go-mysql-elasti]]></description>
</item><item>
    <title>hash一致性</title>
    <link>https://xingliuhua.github.io/posts/hash%E4%B8%80%E8%87%B4%E6%80%A7/</link>
    <pubDate>Fri, 22 Mar 2019 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/hash%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
    <description><![CDATA[普通hash 假如现在需要向4个redis存取图片，以图片的名字为key，value为图片实际存放的路径，我们可以取到key的hash值，然后]]></description>
</item></channel>
</rss>
