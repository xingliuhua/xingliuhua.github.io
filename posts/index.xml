<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 小星星博客</title>
        <link>https://xingliuhua.github.io/posts/</link>
        <description>所有文章 | 小星星博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>947725562@qq.com (xingliuhua)</managingEditor>
            <webMaster>947725562@qq.com (xingliuhua)</webMaster><lastBuildDate>Mon, 21 Mar 2022 17:55:28 &#43;0800</lastBuildDate><atom:link href="https://xingliuhua.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>go运行目录</title>
    <link>https://xingliuhua.github.io/posts/go_%E8%BF%90%E8%A1%8C%E7%9B%AE%E5%BD%95/</link>
    <pubDate>Mon, 21 Mar 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E8%BF%90%E8%A1%8C%E7%9B%AE%E5%BD%95/</guid>
    <description><![CDATA[获取运行目录和工作目录 二进制hello文件所在文件为/a/b/c/hello 如果在目录/c/d/e目录下执行文件hello /a/b/c/hello f.txt fmt.Println(getCurrentAbPathByExecutable()) // 获取当前执]]></description>
</item><item>
    <title>go 平滑重启endless方案</title>
    <link>https://xingliuhua.github.io/posts/go_%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF_endless/</link>
    <pubDate>Thu, 02 Dec 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF_endless/</guid>
    <description><![CDATA[信号处理 Go 信号通知通过在 Channel 上发送 os.Signal 值来工作。如我们如果使用 Ctrl+C，那么会触发 SIGINT 信号，操作系统会中断该进程的正常流程，并进入相应的信号处]]></description>
</item><item>
    <title>gin-http流程</title>
    <link>https://xingliuhua.github.io/posts/go_gin_http%E6%B5%81%E7%A8%8B/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_gin_http%E6%B5%81%E7%A8%8B/</guid>
    <description><![CDATA[go http流程 go中使用web非常简单，因为api封装很完美，一般我们会写下面代码： http.Handle(&#34;/&#34;,handler) http.HandleFunc(&#34;/user&#34;,HandlerFunc) http.ListenAndServe(&#34;:8080&#34;,nil) 还有下面的： mux := http.ServeMux{} mux.Handle(&#34;&#34;,handler) http.ListenAndServe(&#34;&#34;,&amp;mux) 前者没有自动路由器，那么会使]]></description>
</item><item>
    <title>gin-http请求流入gin</title>
    <link>https://xingliuhua.github.io/posts/go_gin_http%E8%AF%B7%E6%B1%82%E6%B5%81%E5%85%A5gin/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_gin_http%E8%AF%B7%E6%B1%82%E6%B5%81%E5%85%A5gin/</guid>
    <description><![CDATA[默认的路由器引流 func main() { http.HandleFunc(&#34;/&#34;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(&#34;Hello World&#34;)) }) if err := http.ListenAndServe(&#34;:8000&#34;, nil); err != nil { fmt.Println(&#34;start http server fail:&#34;, err) } } 例子中 http.HandleFunc 通过看源码，可以看到 URI &ldquo;/&rdquo; 被注册到了 DefaultServeMux 上。 net/http 里面有个非常重要的]]></description>
</item><item>
    <title>gin-前缀树</title>
    <link>https://xingliuhua.github.io/posts/go_gin_%E5%89%8D%E7%BC%80%E6%A0%91/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_gin_%E5%89%8D%E7%BC%80%E6%A0%91/</guid>
    <description><![CDATA[什么是“Trie 树”？ Trie 树，也叫“字典树”。顾名思义，它是一个树形结构。它是一种专门处理字符串匹配的数据结构，用来解决在一组字符串集合中快速]]></description>
</item><item>
    <title>golang内存逃逸</title>
    <link>https://xingliuhua.github.io/posts/go_%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/</guid>
    <description><![CDATA[栈和堆 在编译时，一切无法确定大小或大小可以改变的数据，最好放到堆上，堆适合不可预知大小的内存分配。但是为此付出的代价是分配速度较慢，而且会形]]></description>
</item><item>
    <title>golang语法问题</title>
    <link>https://xingliuhua.github.io/posts/go_%E8%AF%AD%E6%B3%95%E9%97%AE/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E8%AF%AD%E6%B3%95%E9%97%AE/</guid>
    <description><![CDATA[使用值为 nil 的 slice、map会发生啥 允许对值为 nil 的 slice 添加元素，但对值为 nil 的 map 添加元素，则会造成运行时 panic。 func main() { var m map[string]int v, ok := m[&#34;one&#34;] // nil m]]></description>
</item><item>
    <title>golang进程线程协程</title>
    <link>https://xingliuhua.github.io/posts/go_%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
    <description><![CDATA[进程: 进程是具有一定独立功能的程序，进程是系统资源分配和调度的最小单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进]]></description>
</item><item>
    <title>golang 结构体内存对齐</title>
    <link>https://xingliuhua.github.io/posts/go_%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
    <pubDate>Thu, 30 Sep 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
    <description><![CDATA[为何需要内存对齐 CPU和内存数据交互的过程。CPU和内存是通过总线进行数据交互的。其中地址总线用来传递CPU需要的数据地址，内存将数据通过数]]></description>
</item><item>
    <title>趣谈linux笔记</title>
    <link>https://xingliuhua.github.io/posts/linux_%E8%B6%A3%E8%B0%88linux%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Mon, 23 Aug 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/linux_%E8%B6%A3%E8%B0%88linux%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[top命令 经常用来监控linux的系统状况，比如cpu、内存的使用。 第一行： 跟uptime的内容一样。平均负载信息。 第二行： Tasks — 任务（进程）]]></description>
</item></channel>
</rss>
