<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>笔记 - 分类 - xingliuhua博客</title>
        <link>https://xingliuhua.github.io/categories/%E7%AC%94%E8%AE%B0/</link>
        <description>笔记 - 分类 - xingliuhua博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>947725562@qq.com (xingliuhua)</managingEditor>
            <webMaster>947725562@qq.com (xingliuhua)</webMaster><lastBuildDate>Mon, 06 Jun 2022 17:55:28 &#43;0800</lastBuildDate><atom:link href="https://xingliuhua.github.io/categories/%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml" /><item>
    <title>项目中高并发抢红包</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E7%BA%A2%E5%8C%85%E9%97%AE%E9%A2%98/</link>
    <pubDate>Mon, 06 Jun 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E7%BA%A2%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[高并发抢红包问题 红包随机值 为了避免抢红包时实时计算效率慢，采用创建红包活动时就提前计算入红包库。 分配红包尽可能平均，假如现剩60块钱，还要分]]></description>
</item><item>
    <title>项目中高并发秒杀处理</title>
    <link>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80/</link>
    <pubDate>Mon, 06 Jun 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/%E9%A1%B9%E7%9B%AE_%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80/</guid>
    <description><![CDATA[高并发秒杀问题 流程： 先来看秒杀活动流程： 活动入口 客户端秒杀列表页 商品秒杀详情页 点击购买 携带活动ID，商品ID提交服务端 服务端判断活动是否结束]]></description>
</item><item>
    <title>websocket协议</title>
    <link>https://xingliuhua.github.io/posts/network_websocket/</link>
    <pubDate>Wed, 18 May 2022 12:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/network_websocket/</guid>
    <description><![CDATA[概述 HTML5 开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于 TCP 传输协议，并复用 HTTP 的握手通道。 说到优点，这里的对比参照物]]></description>
</item><item>
    <title>mysql慢查询分析</title>
    <link>https://xingliuhua.github.io/posts/mysql_%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90/</link>
    <pubDate>Wed, 20 Apr 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/mysql_%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[InnoDB中，因为直接操作磁盘会比较慢，所以加了一层内存提提速，叫buffer pool，这里面，放了很多内存页，每一页16KB，有些内存页]]></description>
</item><item>
    <title>go运行目录</title>
    <link>https://xingliuhua.github.io/posts/go_%E8%BF%90%E8%A1%8C%E7%9B%AE%E5%BD%95/</link>
    <pubDate>Mon, 21 Mar 2022 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E8%BF%90%E8%A1%8C%E7%9B%AE%E5%BD%95/</guid>
    <description><![CDATA[获取运行目录和工作目录 二进制hello文件所在文件为/a/b/c/hello 如果在目录/c/d/e目录下执行文件hello /a/b/c/hello f.txt fmt.Println(getCurrentAbPathByExecutable()) // 获取当前执]]></description>
</item><item>
    <title>go 平滑重启endless方案</title>
    <link>https://xingliuhua.github.io/posts/go_%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF_endless/</link>
    <pubDate>Thu, 02 Dec 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF_endless/</guid>
    <description><![CDATA[信号处理 Go 信号通知通过在 Channel 上发送 os.Signal 值来工作。如我们如果使用 Ctrl+C，那么会触发 SIGINT 信号，操作系统会中断该进程的正常流程，并进入相应的信号处]]></description>
</item><item>
    <title>gin-http流程</title>
    <link>https://xingliuhua.github.io/posts/go_gin_http%E6%B5%81%E7%A8%8B/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_gin_http%E6%B5%81%E7%A8%8B/</guid>
    <description><![CDATA[go http流程 go中使用web非常简单，因为api封装很完美，一般我们会写下面代码： http.Handle(&#34;/&#34;,handler) http.HandleFunc(&#34;/user&#34;,HandlerFunc) http.ListenAndServe(&#34;:8080&#34;,nil) 还有下面的： mux := http.ServeMux{} mux.Handle(&#34;&#34;,handler) http.ListenAndServe(&#34;&#34;,&amp;mux) 前者没有自动路由器，那么会使]]></description>
</item><item>
    <title>gin-http请求流入gin</title>
    <link>https://xingliuhua.github.io/posts/go_gin_http%E8%AF%B7%E6%B1%82%E6%B5%81%E5%85%A5gin/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_gin_http%E8%AF%B7%E6%B1%82%E6%B5%81%E5%85%A5gin/</guid>
    <description><![CDATA[默认的路由器引流 func main() { http.HandleFunc(&#34;/&#34;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(&#34;Hello World&#34;)) }) if err := http.ListenAndServe(&#34;:8000&#34;, nil); err != nil { fmt.Println(&#34;start http server fail:&#34;, err) } } 例子中 http.HandleFunc 通过看源码，可以看到 URI &ldquo;/&rdquo; 被注册到了 DefaultServeMux 上。 net/http 里面有个非常重要的]]></description>
</item><item>
    <title>gin-前缀树</title>
    <link>https://xingliuhua.github.io/posts/go_gin_%E5%89%8D%E7%BC%80%E6%A0%91/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_gin_%E5%89%8D%E7%BC%80%E6%A0%91/</guid>
    <description><![CDATA[什么是“Trie 树”？ Trie 树，也叫“字典树”。顾名思义，它是一个树形结构。它是一种专门处理字符串匹配的数据结构，用来解决在一组字符串集合中快速]]></description>
</item><item>
    <title>golang内存逃逸</title>
    <link>https://xingliuhua.github.io/posts/go_%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/</link>
    <pubDate>Wed, 27 Oct 2021 17:55:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://xingliuhua.github.io/posts/go_%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/</guid>
    <description><![CDATA[栈和堆 在编译时，一切无法确定大小或大小可以改变的数据，最好放到堆上，堆适合不可预知大小的内存分配。但是为此付出的代价是分配速度较慢，而且会形]]></description>
</item></channel>
</rss>
